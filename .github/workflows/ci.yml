name: ci

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent run, preventing conflicts during deployment.
# This is technically not needed for pull_request runs.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # ===--------------------------------------------------------------------=== #
  # Rust checks (build/format/lint..)
  # ===--------------------------------------------------------------------=== #
  rust-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Install apt-deps
        run: |
          echo "set man-db/auto-update false" | sudo debconf-communicate
          sudo dpkg-reconfigure man-db
          sudo apt-get -y install protobuf-compiler libclang-dev

      - name: Cargo Build
        run: cargo build --all-features

      - name: Cargo Test
        run: cargo test

      - name: Format
        run: cargo fmt -- --check

      - name: Lint
        run: cargo clippy --all-features -- -D warnings

  # ===--------------------------------------------------------------------=== #
  # Python format check
  # ===--------------------------------------------------------------------=== #
  python-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync

      - name: Check formatting
        run: |
          uv run autopep8 --diff --exit-code --recursive . --exclude third_party,verilator

  # ===--------------------------------------------------------------------=== #
  # SystemVerilog format check
  # ===--------------------------------------------------------------------=== #
  systemverilog-fmt:
    runs-on: ubuntu-latest
    env:
      VERIBLE_VERSION: v0.0-4017-g62aee204
      VERIBLE_CHECKSUM: "d9c253c419128530c865664cf4ac70abcf629d4bd04aec1065fd32938394ec2e"
    steps:
      - uses: actions/checkout@v4

      - name: Install verible
        run: |
          VERIBLE_TARBALL="https://github.com/chipsalliance/verible/releases/download/${{ env.VERIBLE_VERSION }}/verible-${{ env.VERIBLE_VERSION }}-linux-static-x86_64.tar.gz"

          echo "Downloading $VERIBLE_TARBALL"
          wget -q $VERIBLE_TARBALL -O verible.tar.gz

          echo "Verifying checksum"
          echo "${{ env.VERIBLE_CHECKSUM }}  verible.tar.gz" | sha256sum -c

          echo "Extracting verible"
          mkdir -p verible
          tar -zxf verible.tar.gz -C verible --strip-components=1
          for i in ./verible/bin/*; do sudo cp $i /usr/local/bin/$(basename $i); done

      - name: Check formatting
        run: |
          ./scripts/verible_format.bash --inplace --verify

  # ===--------------------------------------------------------------------=== #
  # Integration Tests
  # ===--------------------------------------------------------------------=== #
  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install apt-deps (protoc, rv64-gcc)
        run: |
          echo "set man-db/auto-update false" | sudo debconf-communicate
          sudo dpkg-reconfigure man-db
          sudo apt-get install protobuf-compiler gcc-riscv64-unknown-elf

      - name: Install Verilator
        uses: ./.github/actions/setup-verilator
        with:
          verilator-version: 63f5f5c328fa15a839c7316b711f9e1558ad67ed 

      - name: Install Python dependencies
        run: uv sync

      - name: Build + Run Examples
        run: |
          uv run ./examples/run.py

      - name: Upload example traces (for docs)
        uses: actions/upload-artifact@v4
        with:
          name: examples-out
          path: examples/out/
          retention-days: 0.1

      - name: Run integration tests
        run: ./test/test.bash

  # ===--------------------------------------------------------------------=== #
  # Build Docs
  # ===--------------------------------------------------------------------=== #

  docs:
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - uses: actions/checkout@v4

      - name: Download examples output (from integration test)
        uses: actions/download-artifact@v4
        with:
          name: examples-out
          path: examples/out/

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: install mdbook
        env:
          MDBOOK_HASH: "d611bcde080f1ab9932ca1724197ac2c23bb8c5d64581bb5da238bfbb4d39184"
        run: |
          mkdir -p ~/bin
          curl -sSL -o /tmp/mdbook.tar.gz https://github.com/rust-lang/mdBook/releases/download/v0.4.51/mdbook-v0.4.51-x86_64-unknown-linux-gnu.tar.gz
          echo "$MDBOOK_HASH  /tmp/mdbook.tar.gz" | sha256sum --check --status || { echo "mdBook hash mismatch!"; exit 1; }
          tar -xz -f /tmp/mdbook.tar.gz --directory="$HOME/bin"
          chmod +x ~/bin/mdbook

      - name: Install mdbook-alerts
        env:
          MDBOOK_ALERTS_HASH: "443951345caf628b2893fe7c9e566c1262b1c9d37328d81e622e5c15a35c96a5"
        run: |
          mkdir -p ~/bin
          wget https://github.com/lambdalisue/rs-mdbook-alerts/releases/download/v0.8.0/mdbook-alerts-x86_64-unknown-linux-gnu -O /tmp/mdbook-alerts
          echo "$MDBOOK_ALERTS_HASH  /tmp/mdbook-alerts" | sha256sum --check --status || { echo "mdbook-alerts hash mismatch!"; exit 1; }
          mv /tmp/mdbook-alerts $HOME/bin/mdbook-alerts
          chmod +x ~/bin/mdbook-alerts

      - name: Install mdbook-linkcheck
        env:
          MDBOOK_LINKCHECK_HASH: "18cebca9493804b307b39a44af2664cdfa881e84b8d92a94205d6c51572318ef"
        run: |
          mkdir -p ~/bin
          cd /tmp
          curl -L -o mdbook-linkcheck.zip https://github.com/Michael-F-Bryan/mdbook-linkcheck/releases/download/v0.7.7/mdbook-linkcheck.x86_64-unknown-linux-gnu.zip
          echo "$MDBOOK_LINKCHECK_HASH  mdbook-linkcheck.zip" | sha256sum --check --status || { echo "mdbook-linkcheck hash mismatch!"; exit 1; }
          unzip mdbook-linkcheck.zip -d $HOME/bin
          chmod +x $HOME/bin/mdbook-linkcheck

      - name: Build documentation
        run: |
          PATH=$PATH:$HOME/bin CSPECT_DOCS_STRICT=1 mdbook build

      - name: Check for example_missing.html
        run: |
          if [ -f "build/mdbook/html/examples_missing.html" ]; then
            echo "❌ Build failed: examples_missing.html file exists"
            exit 1
          else
            echo "✅ No missing examples detected"
          fi

      - name: Upload artifact
        if: github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{github.workspace}}/build/mdbook/html/

  # ===--------------------------------------------------------------------=== #
  # Deploy Docs
  # ===--------------------------------------------------------------------=== #

  # Deploy to github pages (push only)
  docs-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    if: github.event_name == 'push'
    needs: ["docs", "integration", "rust-checks", "python-fmt", "systemverilog-fmt"]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
